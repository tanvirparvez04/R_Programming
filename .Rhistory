las=T,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=T,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=T,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
#las=T,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=T,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=2,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day"
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
nm.ra=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
las=1,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
apply(
stockdata,
2,
FUN = plot,type="l",
main="Stock",
ylab="Price",
xlab="Day",
na.rm=T
)
apply(
stockdata,
2,
FUN = plot,type="l",
main="Stock",
ylab="Price",
xlab="Day",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#another:
apply(
stockdata,
MARGIN = 2,
FUN = plot,
type="l",#plot futa futa na theke futa gulo milito ekta dag hoye jabe
xlab ="price",
ylab ="day",
main="stock",
na.rm=T
)
#-------------colmean for stock data:-----
colMeans(stockdata)
colMeans(stockdata,na,rm=T)
colMeans(stockdata,na.rm=T)
rowMeans(stockdata)
rowMeans(stockdata,na.rm = T)
rowMeans(stockdata)
meanData <-rowMeans(stockData,na.rm=T)
meanData <-rowMeans(stockdata,na.rm=T)
meanData
meanData <-rowMeans(stockdata,na.rm=T)
meanData
any,mean.data<-rowMeans(stockdata,na.rm = T)
any.mean.data<-rowMeans(stockdata,na.rm = T)
any.mean.data
plot(rowMeans(stockdata,na.rm=T))
plot(rowMeans(stockdata,na.rm=T),main="stockmeans per day",ylab="prize",xlab="day")
plot(any.mean.data,main = "stocks",type="l")
#---------------------------------------------------
lcd<-read.table("LungCapData.csv",header=T)
#---------------------------------------------------
lcd<-read.table("LungCapData.csv",header=T)
#---------------------------------------------------
lcd<-read.table("LungCapData.csv",header=T,sep = "")
#---------------------------------------------------
lcd<-read.table("LungCapData.csv")
#---------------------------------------------------
lcd<-read.table("LungCapData.csv")
#---------------------------------------------------
lcd<-read.table("LungCapData.csv")
#---------------------------------------------------
lcd<- read.table("LungCapData.csv")
#---------------------------------------------------
lcd<- read.table("LungCapData.csv",header = T,sep = ",")
View(lcd)
View(lcd)
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv")
View(lcd)
View(lcd)
library(readr)
LungCapData <- read_csv("LungCapData.csv")
View(LungCapData)
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv")
View(lcd)
View(lcd)
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv",header=T)
View(lcd)
View(lcd)
View(LungCapData)
View(LungCapData)
lcd2<-read.csv("LungCapData.csv")
View(lcd2)
View(lcd2)
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv",header=T,sep="\t")
View(lcd)
View(lcd)
head(lcd)
attach(lcd)
length(Age)
apply(Age,2,mean)
apply(Age,1, FUN=mean)
mean(Age)
apply(Age,2,FUN = mean)
apply(Age,1,FUN = mean)
apply(Age,2,mean)
apply(Age,1, FUN=mean)
apply(Age,2,max)
apply(Age,2,sum)
apply(Age,2,mean)
apply(Age,2,mean)
head(lcd)
attach(lcd)
length(Age)
apply(Age,2,mean)
Age
apply(Age,2,mean)
mean(Age)
head(lcd)
attach(lcd)
attach(lcd)
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv",header=T,sep="\t")
head(lcd)
attach(lcd)
rm(list=ls())
#---------------------------------------------------
lcd<- read.csv("LungCapData.csv",header=T,sep="\t")
head(lcd)
attach(lcd)
attach(lcd)
head(lcd)
attach(lcd)
length(Age)
Age
apply(Age,2,mean)
apply(Height,2,mean)
apply(lcd$Age,2,mean)
lcd <- read.table(file.choose(),header = T)
head(lcd)
attach(lcd)
attach(lcd)
length(Age)
apply(Age,1, FUN=mean)
head(Age)
apply(lcd$Age,2,mean,na.rm=T)
head(lcd)
attach(lcd)
Age
length(Age)
attach(lcd)
Age
length(Age)
apply(lcd$Age,2,mean,na.rm=T)
mean(Age)
stock<-read.table(file.choose(),header=T)
stock
head(stock)
apply(stock,2,mean,na.rm=T)
apply(stock,mean,2,na.rm=T)
apply(stock[,2],2,mean,na.rm=T)
help(apply)
attach(stock)
stock[,2]
names(stock)
Stock1
apply(Stock1,MARGIN=2,FUN = mean)
class(Stock1)
myMatrix <- matrix(Stock1)
myMatrix
apply(myMatrix,MARGIN = 2,FUN = mean)
matA <- matrix(Stock1,Stock2,Stock3,nrow=3,ncol=10)
view(stock)
stock
stock <- stock[7,3]<-1.36
stock
apply(Stock1,2,mean,na.rm=T)
Stock1
class(Stock1)
matA <- matrix(Stock1,Stock2,Stock3,nrow=3,ncol=10)
help("install.packages")
install.packages("epiR")
help("install.package")
help("install.packages")
install.packages("name of the package")
?save.image
rm=list(ls)
rm(list=ls())
lcd<-read.table("LungCapData.txt")
View(lcd)
View(lcd)
lcd<-read.table("LungCapData.txt",header = T)
View(lcd)
View(lcd)
#attach it
attach(lcd)
attach(lcd)
# check if some need to make as factor
Smoke <- as.factor(Smoke)
Gender <- as.factor(Gender)
Caesarean <- as.factor(Caesarean)
names(lcd)
newdata<-data.frame(LungCap,Age,Height,Smoke,Gender,Caesarean)
View(newdata)
View(newdata)
class(newdata)
class(newdata$Gender)
meanage<-mean(Age)
meanage
z<-summary(newdata)
z
?save.image
#how to save all objets and varible is runing:
save.image("saving r objects.Rdata")#extension .Rdata
x <- 2
y <- 3
x+y
x**y
sqrt(x)
log(x)
exp(x)
rm(list = ls())
load("C:/Users/88017/Downloads/R/MY PROGRAM/saving r objects.Rdata")
load("C:/Users/88017/Downloads/R/MY PROGRAM/niaz vai class/extra c/SecondProject2.Rdata")
?array
#---------------------------------------------------
#-------------------lapply() function------
#lapply() function is useful for performing operations on list objects and returns a list object of same length of original set. lappy() returns a list of the similar length as input list object, each element of which is the result of applying FUN to the corresponding element of list. Lapply in R takes list, vector or data frame as input and gives output in list.
# lapply(X, FUN)
# Arguments:
# -X: A vector or an object
# -FUN: Function applied to each element of x
lapply(c(1:10),mean)
#---------------------------------------------------
#-------------------lapply() function------
#lapply() function is useful for performing operations on list objects and returns a list object of same length of original set. lappy() returns a list of the similar length as input list object, each element of which is the result of applying FUN to the corresponding element of list. Lapply in R takes list, vector or data frame as input and gives output in list.
# lapply(X, FUN)
# Arguments:
# -X: A vector or an object
# -FUN: Function applied to each element of x
lapply(c(1:10),sum)
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
str(movies_lower)
movies_lower
list(movies_lower)
unlist(movies_lower)
movies_upper <-lapply(movies, toupper)
unlist(movies_upper)
df<-cars
View(df)
View(df)
sapply(df, min)
dt<-cars
sapply(dt, min)
lmn_cars <- lapply(dt, min)
lmn_cars
smn_cars <- sapply(dt, min)
smn_cars
#another:
df<-cars
#another:
df<-cars
a<-spply(df,max)
a<-sapply(df,max)
a
b<-lapply(df,max)
b
avg<-function(x){
(min(x)+max(x))/2
}
anycars<-sapply(dt,avg)
anycars
anycars<-lapply(dt,avg)
anycars
# apply(), lapply(), sapply(), and tapply() in R:
View("apply(), lapply(), sapply(), tapply() Function in R with Examples by me(tanvir).txt")
# apply(), lapply(), sapply(), and tapply() in R:
toknow<-read.table("apply(), lapply(), sapply(), tapply() Function in R with Examples by me(tanvir).txt",header=T)
# apply(), lapply(), sapply(), and tapply() in R:
toknow<-read.table("apply(), lapply(), sapply(), tapply() Function in R with Examples by me(tanvir).txt",header=T)
View(toknow)
# apply(), lapply(), sapply(), and tapply() in R:
toknow<-read.table("apply(), lapply(), sapply(), tapply() Function in R with Examples by me(tanvir).txt",header=T)
# apply(), lapply(), sapply(), and tapply() in R:
toknow<-read.table("apply(), lapply(), sapply(), tapply() Function in R with Examples by me(tanvir).txt",header=T,sep="\t")
View(toknow)
View(toknow)
View(lcd)
tapply(lcd$Age,lcd$Height,mean)
tapply(lcd$Age,lcd$Height,median)
#or using cars data (default)
tapply(cars$speed,cars$dist,min)
#or using cars data (default)
tapply(cars$speed,cars$dist,max)
#or using cars data (default)
tapply(cars$speed,cars$dist,sum)
#or using cars data (default)
tapply(cars$speed,cars$dist,median)
libPaths()
libPaths()
installed.packages()
##check if ggplot2 is installed
system.file(package='epiR')
installed.packages("epiR")
install.packages("xlsx")
#-------------------------------------------
#install xlsx package:
install.packages("xlsx")
# Verify the package is installed.
any(grepl("xlsx",installed.packages()))
any(grepl("xlsx",installed.packages()))
any(grepl("Tanvir",installed.packages()))
# Load the library into R workspace.
library("xlsx")
# Load the library into R workspace.
library("xlsx")
library("xlsx")
any(grepl("Tanvir",installed.packages()))
# Verify the package is installed.
any(grepl("xlsx",installed.packages()))#TRUE:yes installed,FALSE:not installed
# Load the library into R workspace.
library("xlsx")
any(grepl("xlsx",installed.packages()))
library("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library("xlsx")
# Read the first worksheet in the file input.xlsx.
data <- read.xlsx("input.xlsx", sheetIndex = 1)
print(data)
# Read the first worksheet in the file input.xlsx.
data <- read.xlsx("input.xlsx", sheetIndex = 1)
# Read the first worksheet in the file input.xlsx.
data <- read.xlsx("input.xlsx", sheetIndex = 1)
# Read the first worksheet in the file input.xlsx.
data <- read.xlsx("input.xlsx", sheetIndex = 1)
library("xlsx")
installed.packages("xlsx")
install.packages(xlsx)
install.packages("xlsx")
library("xlsx")
