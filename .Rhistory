xlab="Age",
xlim = c(0,25),
cex=.5,
las=1
)
plot(lcd$Age,lcd$Height,main="Age vs Height Scatterplot",
ylab = "Height",
xlab="Age",
xlim = c(0,25),
cex=3,
las=1
)
plot(lcd$Age,lcd$Height,main="Age vs Height Scatterplot",
ylab = "Height",
xlab="Age",
xlim = c(0,25),
cex=1,
las=1
)
plot(lcd$Age,lcd$Height,main="Age vs Height Scatterplot",
ylab = "Height",
xlab="Age",
xlim = c(0,25),
cex=1,
las=1,
pch=6
)
plot(lcd$Age,lcd$Height,main="Age vs Height Scatterplot",
ylab = "Height",
xlab="Age",
xlim = c(0,25),
cex=1,
las=1,
pch="6"
)
abline(lm(lcd$Height~lcd$Age))
#--------------------------------------
#pie(AgeGroups)
#------------------------------------------
hist(LungCap)
hist(LungCap,freq = F,las=1)
hist(LungCap,freq = F,las=1)
hist(LungCap,probability = T,
ylim=c(0,.2),
xlim=c(0,20),las=1)
hist(LungCap,freq = F,las=1)
hist(LungCap,freq = F,las=1)
hist(LungCap,
freq = F,
las=1)
hist(LungCap,
#freq = F,
las=1)
hist(LungCap,
freq = F,
las=1)
hist(LungCap,
#freq = F,
las=1)
hist(LungCap,
freq = F,
las=1)
hist(LungCap,probability = T,
# ylim=c(0,.2),
xlim=c(0,20),las=1)
hist(LungCap,probability = T,
ylim=c(0,.2),
xlim=c(0,20),las=1)
?type
?type="l"
#
# xlab is used to give description of x-axis.
#
# xlim is used to specify the range of values on the x-axis.
#
# ylim is used to specify the range of values on the y-axis.
#
# breaks is used to mention the width of each bar.
#-------------------------------------
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "red")
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
#--------------------------
#practice:
lcd<-read.table("LungCapData.txt",header=T,sep="\t")
hist(lcd$LungCap)
hist(lcd$LungCap,freq = F,las=1)
hist(lcd$LungCap,
probability = T,
#freq=F,
xlim=c(0,20),
ylim=c(0,.2),
col="red",
las=1)
?hist
Run examples
op <- par(mfrow = c(2, 2))
hist(islands)
utils::str(hist(islands, col = "gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col = "lightblue", border = "pink")
##-- For non-equidistant breaks, counts should NOT be graphed unscaled:
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),
col = "blue1")
text(r$mids, r$density, r$counts, adj = c(.5, -.5), col = "blue3")
sapply(r[2:3], sum)
sum(r$density * diff(r$breaks)) # == 1
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
par(op)
require(utils) # for str
str(hist(islands, breaks = 12, plot =  FALSE)) #-> 10 (~= 12) breaks
str(hist(islands, breaks = c(12,20,36,80,200,1000,17000), plot = FALSE))
hist(islands, breaks = c(12,20,36,80,200,1000,17000), freq = TRUE,
main = "WRONG histogram") # and warning
## Extreme outliers; the "FD" rule would take very large number of 'breaks':
XXL <- c(1:9, c(-1,1)*1e300)
hh <- hist(XXL, "FD") # did not work in R <= 3.4.1; now gives warning
## pretty() determines how many counts are used (platform dependently!):
length(hh$breaks) ## typically 1 million -- though 1e6 was "a suggestion only"
## R >= 4.2.0: no "*.5" labels on y-axis:
hist(c(2,3,3,5,5,6,6,6,7))
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
## Histogram with custom x-axis:
hist(x, xaxt = "n")
axis(1, at = 0:17)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
## if you really insist on using hist() ... :
hist(x, freq = FALSE, ylim = c(0, 0.2))
curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)
plot(1:length(df$LungCap),df$LungCap)
#default data iris or cars:
cars
#default data iris or cars:
#cars
iris
View(iris)
#correlation:
cor(iris)
#iris er last data ta newmeric koro
iris$Species<-as.numeric(iris$Species)
str(iris)
#now correlation:
cor(iris)
plot(iris)
#method use;
cor(iris,method = "pearson")
?cor
cor(iris,method = "kendall")
cor(iris,method = "spearman")
?correlation matrix
#correlation matrix:
cor.test(iris)
#iris er last data ta newmeric koro:
iris$Species<-as.numeric(iris$Species)
#correlation matrix:
cor.test(iris)
#check:
str(iris)
#now correlation:
cor(iris)
plot(iris)
#method use;
cor(iris,method = "pearson")
cor(iris,method = "kendall")
cor(iris,method = "spearman")
#correlation matrix:
cor.test(iris)
#--------------------------------------------
iris$Species<-NULL
iris
#correlation matrix:
cor.test(iris)
#correlation matrix:
cor.test(iris$Sepal.Length)
#correlation matrix:
cor.test(iris$Sepal.Length,iris$Sepal.Width)
#correlation matrix:
cor.test(iris)
#default data iris or cars:
#cars
iris
dm<-iris$Species[iris$Species=="setosa"]<-1
iris$Species[iris$Species=="setosa"]<-1
iris$Species[iris$Species=="setosa"]<-1
installed.packages(readr)
install.packages(readr)
installed.packages(readr)
install.packages("readr")
#set working diretiory:
setwd("C:\Users\88017\Downloads\R\course")
#set working diretiory:
setwd(C:\Users\88017\Downloads\R\course)
#set working diretiory:
setwd("C:\Users\88017\Downloads\R\course")
#read in the data
installed.packages(readr)
#read in the data
installed.packages("readr")
#read in the data
installed.packages("readr")
library(readr)
#dropping any column:
View(iris)
#dropping any column:
View(iris)
iris$Petal.Length<-NULL
iris$Petal.Length<-NULL
#dropping any column:
View(iris)
#record:species setosa=1 and 	versicolor=0
iris$Species[iris$Species=="setosa"]=0
#record:species setosa=1 and 	versicolor=0
iris$Species[iris$Species=="setosa"]<-1
iris$Species[iris$Species=="versicolor"]<-0
#set data as nemeric:
iris$Species<-as.numeric(iris$Species)
str(iris$Species)
str(iris)
#cor from base r
cor(iris)
cor(iris,method = "pearson")
#correlation test from pschy
install.packages("pschy")
#correlation test from pschy
install.packages("pysch")
#correlation test from pschy
install.packages("psych")
library(psych)
corr.test(iris)
corr.test(iris,method="pearson")
#for watching confidence interval:
corrmatrix<-corr.test(iris,method="pearson")
print(corrmatrix)
#for watching confidence interval:
corrmatrix<-corr.test(iris,method="pearson")
print(corrmatrix,short = FALSE)
#save it as a csv file in your current directory
write.csv("correlation matrix 01.csv")
#save it as a csv file in your current directory
write.csv(corrmatrix$r,"correlation matrix 01.csv")
#save it as a csv file in your current directory
write.csv(corrmatrix$r,"correlation matrix 01.csv")
#need a package:
installed.packages("MASS")
library(MASS)
#call default data
swiss
View(swiss)
#make a linear model where fertolity is dependent variable:
model1<-lm(swiss$Fertility~.)
#make a linear model where fertolity is dependent variable:
model1<-lm(swiss$Fertility~.,data=swiss)
model1
summary(model1)
#forword:
step.forward<-stepAIC(model1,direction = "forward")
?stepAIC
step.forward
#forword:
step.forward<-stepAIC(model1,direction = "forward",trace = 1)
#forword:
step.forward<-stepAIC(model1,direction = "forward",trace = 1)
step.forward
summary(step.forward)
step.forward<-stepAIC(model1,direction = "backward",trace = 1)
summary(step.forward)
step.forward<-stepAIC(model1,direction = "both",trace = 1)
summary(step.forward)
step.forward<-stepAIC(model1,direction = c("forward","backward","both"),trace = 1)
forward <- step(swiss$Fertility~., direction='forward', scope=formula(all), trace=0)
forward <- stepAIC(swiss$Fertility~., direction='forward', scope=formula(all), trace=0)
forward <- step(model1, direction='forward', scope=formula(all), trace=0)
forward <- step(model1, direction='forward')
forward <- step(model1, direction='forward',trace = 0)
forward
#########or
forward<-step(model1,direction = "forward")
summary(forward)
backward<-step(model1,direction = "backward")
summary(backword)
both<-step(model1,direction = "both")
backward<-step(model1,direction = "backward")
backward<-step(model1,direction = "backward")
summary(backword)
summary(backward)
both<-step(model1,direction = "both")
summary(both)
matrix<-matrix(x)
#take matrix name x
x<-c(2,4,6,7,8,9,7,6,4)
matrix<-matrix(x)
matrix
matrix<-matrix(x,nrow=3,ncol=3)
matrix
?matrix
m<-as.matrix(x)
m
m<-as.matrix(x,nrow=3,ncol=3)
m
matrix<-matrix(x,nrow=3,ncol=3,byrow=F)
matrix
matrix<-matrix(x,nrow=3,ncol=3,byrow=T)
matrix
#take matrix name x
y<-c(2,4,6,7,8,9,7,6,4)
x<-matrix(y,nrow=3,ncol=3,byrow=T)
x
t_of_x<-trans(x)
?transpose
t_of_x<-t(x)
t
#take matrix name x
y<-c(2,4,6,7,8,9,7,6,4)
x<-matrix(y,nrow=3,ncol=3,byrow=T)
x
t_of_x<-t(x)
t_of_x
g<-t_of_x%*%x
g
i<-g^-1
i
i==g**-1
dim(i)
k<-matrix(1:15,3)
k
k<-matrix(1:15,3,3)
k<-matrix(1:9,3,3)
k
u<-k%*%t_of_x
u
yyyyy<-i%*%u
yyyyy
y2<-((t(x)%*%x)**-1)%*%t(x)%*%k
y2
y2<-((t(x)%*%x)**-1)%*%(t(x)%*%k)
y2
y3<-inv(t(x)%*%x)%*%(t(x)%*%k)
?inverse
install.packages(matlib)
inv(x)
?inverse matrix
x
solve(x)
inverse.gaussian(x)
x^-1
adj(x)/det(x)
print(inv(t(x)))
install.packages("matlib")
inv(x)
inv(t(x))
#visualization:
#scatter plot:
plot(mc$mpg,mc$cyl,
main = "Miles per gallon and number of cylinder scatter plot",
xlab = "miles per gallon",
ylab="number of cylinder",
xlim=c(0,50),
#ylim=c(0,18),
las=1,
col="blue",
col.main="red",
cex=1.5,
col.lab="green"
)
mc<-mtcars
#visualization:
#scatter plot:
plot(mc$mpg,mc$cyl,
main = "Miles per gallon and number of cylinder scatter plot",
xlab = "miles per gallon",
ylab="number of cylinder",
xlim=c(0,50),
#ylim=c(0,18),
las=1,
col="blue",
col.main="red",
cex=1.5,
col.lab="green"
)
#visualization:
#scatter plot:
plot(mc$mpg,mc$cyl,
main = "Miles per gallon and number of cylinder scatter plot",
xlab = "miles per gallon",
ylab="number of cylinder",
xlim=c(0,50),
ylim=c(0,18),
las=1,
col="blue",
col.main="red",
cex=1.5,
col.lab="green"
)
mc<-mtcars
width = c(1,2,3,5),
names.arg = mc$cyl,
barplot(mc$mpg,
names.arg = mc$cyl,
#density = 25,
col="red",
#width = c(1,2,3,5),
#horiz=T)
)
barplot(mc$mpg,
names.arg = mc$cyl,
#density = 25,
col="red",
width = c(1,2,3,5),
#horiz=T)
)
barplot(mtcars$carb)
barplot(swiss$Fertility)
View(swiss)
View(iris)
View(iris)
rm(list=ls(iris))
View(iris)
barplot(iris)
barplot(iris$Species)
lcd<-read.table("LungCapData.txt",header = T,sep = "\t")
names(lcd)
###########################class01##############
#more than one column:
barplot( c(lcd$Age,lcd$Height,lcd$LungCap))#onek data hoyate onek baje plot dekhai
#any one column :
class(lcd$Gender)
barplot(lcd$Gender)#hobe na karon gender factor e nai
barplot(table(lcd$Gender))#factor nah holeo data gulo dable er vitor rekhe plot kora jai
barplot(table(iris$Species))
p_ofspecies<-table(iris$Species)/length(iris$Species)
barplot(p_ofspecies)
barplot(p_ofspecies,main="persentage of species")
barplot(p_ofspecies,main="persentage of species",col = "red")
barplot(p_ofspecies,
main="persentage of species",
col = "red",
xlab="species",
ylab = "persentage",
las=1
)
barplot(p_ofspecies,
main="persentage of species",
col = "red",
xlab="species",
ylab = "persentage",
las=1,
horiz=T
)
barplot(p_ofspecies,
main="persentage of species",
col = "red",
xlab="species",
ylab = "persentage",
las=1,
#horiz=T,
names.arg = c()
)
barplot(p_ofspecies,
main="persentage of species",
col = "red",
xlab="species",
ylab = "persentage",
las=1,
#horiz=T,
names.arg = c("sentosa","versicolor","virginica")
)
barplot(p_ofspecies,
main="persentage of species",
col = "red",
xlab="species",
ylab = "persentage",
las=1,
#horiz=T,
names.arg = c("Sentosa","Versicolor","Virginica")
)
line2<-mtcars$cyl
plot(line1,line2)
#line plot:
line1<-mtcars$mpg
line2<-mtcars$cyl
plot(line1,line2)
plot(line1,line2,
type=l)
plot(line1,line2,
type="l")
plot(line1,type = "l")
line(line2)
lines(line2)
plot(line1,type = "l")
lines(line2)
lines(line2,type = "l",col="red")
plot(line1,type = "l",col="blue")
lines(line2,type = "l",col="red")
line1 <- c(1,2,3,4,5,10)
line2 <- c(2,5,7,8,9,10)
plot(line1, type = "l", col = "blue")
lines(line2, type="l", col = "red")
lines(1:10,type="l",col="6")
#line plot:
line1<-mtcars$mpg
line2<-mtcars$cyl
plot(line1,line2,
type="l")
plot(line1,type = "l",col="blue")
lines(line2,type = "l",col="red")
lines(line2,type="l",col="green")
lines(1:10)
